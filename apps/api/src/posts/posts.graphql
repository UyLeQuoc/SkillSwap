type Post {
  id: ID!
  haveSkill: String!
  wantSkill: String!
  description: String
  type: PostType!
  status: PostStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  userId: String!
  tags: [Tag!]
  matchAsSource: [Match!]
  matchAsTarget: [Match!]
  dealsAsPostA: [Deal!]
  dealsAsPostB: [Deal!]
}

type User {
  id: ID!
  wallet: String!
  posts: [Post!]
  dealsAsUserA: [Deal!]
  dealsAsUserB: [Deal!]
  reviewsAsReviewer: [Review!]
  reviewsAsReviewee: [Review!]
}

type Tag {
  id: ID!
  name: String!
  posts: [Post!]
}

type Match {
  id: ID!
  sourcePost: Post!
  targetPost: Post!
  score: Float!
  method: String!
  createdAt: DateTime!
}

type Deal {
  id: ID!
  postA: Post!
  postB: Post!
  userA: User!
  userB: User!
  type: DealType!
  status: DealStatus!
  createdAt: DateTime!
  completedAt: DateTime
  reviews: [Review!]
}

type Review {
  id: ID!
  deal: Deal!
  reviewer: User!
  reviewee: User!
  rating: Int!
  comment: String
  createdAt: DateTime!
}

enum PostType {
  EXCHANGE
  TEACH
  LEARN
}

enum PostStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum DealType {
  EXCHANGE
  TEACH
  LEARN
}

enum DealStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

input CreatePostInput {
  haveSkill: String!
  wantSkill: String!
  description: String
  type: PostType!
  tags: [CreateTagInput!]
}

input UpdatePostInput {
  id: ID!
  haveSkill: String!
  wantSkill: String!
  description: String
  type: PostType!
  tags: [CreateTagInput!]
}

input CreateTagInput {
  name: String!
}

type Query {
  posts: [Post!]!
  post(id: ID!): Post
  postsByWallet(wallet: String!): [Post!]!
}

type Mutation {
  createPost(input: CreatePostInput!): Post!
  updatePost(input: UpdatePostInput!): Post!
  createTag(input: CreateTagInput!): Tag!
} 