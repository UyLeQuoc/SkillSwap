// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Roles
enum Roles {
  ADMIN
  CUSTOMER
}

enum PostStatus {
  ACTIVE
  INACTIVE
  MATCHED
}

enum MatchMethod {
  EXACT
  PARTIAL
  TAG
  GPT
  EMBEDDING
}

enum DealStatus {
  PENDING
  AGREED
  COMPLETED
  CANCELLED
}

enum DealType {
  SKILL_SWAP
  ITEM_SWAP
}

enum PostType {
  SKILL
  ITEM
}

model User {
  id              String     @id @default(uuid())
  wallet          String     @unique
  name            String?
  avatarUrl       String?
  bio             String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  role            Roles      @default(CUSTOMER)
  reputationScore Float @default(0)

  posts           Post[]
  skillBadges     SkillBadge[] @relation("UserSkillBadges")
  verifiedBadges  SkillBadge[] @relation("VerifierSkillBadges")
  reviewsGiven    Review[]   @relation("Reviewer")
  reviewsReceived Review[]   @relation("Reviewee")
  dealsAsA        Deal[]     @relation("DealsAsA")
  dealsAsB        Deal[]     @relation("DealsAsB")
}

model Post {
  id              String     @id @default(uuid())
  userId          String
  haveSkill       String
  wantSkill       String
  description     String
  status          PostStatus @default(ACTIVE)
  type            PostType   @default(SKILL)
  createdAt       DateTime   @default(now())

  normalizedHave  String?
  normalizedWant  String?
  normalizedDesc  String?

  user            User       @relation(fields: [userId], references: [id])
  tags            PostTag[]  @relation("PostToTags")
  dealsAsPostA    Deal[]     @relation("PostA")
  dealsAsPostB    Deal[]     @relation("PostB")
  matchAsSource   MatchingSuggestion[] @relation("MatchingSource")
  matchAsTarget   MatchingSuggestion[] @relation("MatchingTarget")
}

model PostTag {
  id    String  @id @default(uuid())
  name  String  @unique
  posts Post[]  @relation("PostToTags")

  @@index([name])
}

model MatchingSuggestion {
  id            String     @id @default(uuid())
  sourcePostId  String
  targetPostId  String
  method        MatchMethod
  score         Float?
  createdAt     DateTime   @default(now())

  sourcePost    Post       @relation("MatchingSource", fields: [sourcePostId], references: [id])
  targetPost    Post       @relation("MatchingTarget", fields: [targetPostId], references: [id])
}

model Deal {
  id          String     @id @default(uuid())
  userAId     String
  userBId     String
  postAId     String?
  postBId     String?
  status      DealStatus @default(PENDING)
  type        DealType   @default(SKILL_SWAP)
  createdAt   DateTime   @default(now())
  completedAt DateTime?

  userA       User       @relation("DealsAsA", fields: [userAId], references: [id])
  userB       User       @relation("DealsAsB", fields: [userBId], references: [id])
  postA       Post?      @relation("PostA", fields: [postAId], references: [id])
  postB       Post?      @relation("PostB", fields: [postBId], references: [id])
  reviews     Review[]
}

model Review {
  id          String   @id @default(uuid())
  dealId      String
  reviewerId  String
  revieweeId  String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())

  reviewer    User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewee    User     @relation("Reviewee", fields: [revieweeId], references: [id])
  deal        Deal     @relation(fields: [dealId], references: [id])

  @@unique([dealId, reviewerId])
}

model SkillBadge {
  id          String   @id @default(uuid())
  userId      String
  verifierId  String
  skillName   String
  suiNftId    String
  mintedAt    DateTime @default(now())

  user        User     @relation("UserSkillBadges", fields: [userId], references: [id])
  verifier    User     @relation("VerifierSkillBadges", fields: [verifierId], references: [id])

  @@index([userId, skillName])
}